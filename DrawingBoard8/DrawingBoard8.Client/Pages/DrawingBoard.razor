@page "/drawingboard"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveAuto

<style>
    .container {
        display: flex;
        width: 100%;
        height: 600px;
    }

    .canvas-container {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        border: 2px solid #fff;
        background-color: #000;
    }

    .usersList {
        width: 20%;
        padding: 10px;
    }
</style>

<h3>Collaborative Drawing Board</h3>

@if (!isConnected)
{
    <div>
        <input @bind="userName" placeholder="Enter your name" />
        <button @onclick="ConnectToBoard">Join Drawing Board</button>
        @if (string.IsNullOrWhiteSpace(userName))
        {
            <p>Please enter your name.</p>
        }
    </div>
}
else
{
    <div class="container">
        <div class="canvas-container">
            <canvas id="drawingBoard"></canvas>
        </div>
        <div class="usersList">
            <h4>Connected Users</h4>
            <ul>
                @foreach (var user in connectedUsers)
                {
                    <li style="color:@user.Color">@user.Name</li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private bool isConnected = false;
    private string userName = "Unknown";
    private string userColor = string.Empty;
    private HubConnection? hubConnection;
    private List<User> connectedUsers = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/board"))
            .Build();

        hubConnection.On<int, int, int, int, string, string>("OnDrawingAsync", async (startX, startY, endX, endY, color, name) =>
        {
            await JS.InvokeVoidAsync("drawFromServer", startX, startY, endX, endY, color, name);
        });

        hubConnection.On<string, string>("UserJoined", async (name, color) =>
        {
            await InvokeAsync(() =>
            {
                connectedUsers.Add(new User { Name = name, Color = color });
                StateHasChanged();
            });
        });  

        hubConnection.On<string>("UserDisconnected", async (name) =>
        {
            await InvokeAsync(() =>
            {
                var user = connectedUsers.FirstOrDefault(u => u.Name == name);
                if (user != null)
                {
                    connectedUsers.Remove(user);
                }
                StateHasChanged();
            });
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to hub: {ex.Message}");
        }
    }

    private async Task ConnectToBoard()
    {
        if (!string.IsNullOrWhiteSpace(userName) && hubConnection?.State == HubConnectionState.Connected)
        {
            isConnected = true;
            userColor = GenerateRandomColor();
            await hubConnection.InvokeAsync("SendUserDetails", userName, userColor);
            await JS.InvokeVoidAsync("initializeDrawingBoard", DotNetObjectReference.Create(this), userColor, userName);
        }
    }

    private string GenerateRandomColor()
    {
        var random = new Random();
        return $"#{random.Next(0x1000000):X6}";
    }

    [JSInvokable]
    public async Task SendDrawingData(int startX, int startY, int endX, int endY)
    {
        if (hubConnection is { State: HubConnectionState.Connected })
        {
            await hubConnection.InvokeAsync("DrawingAsync", startX, startY, endX, endY, userColor, userName);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class User
    {
        public string Name { get; set; }
        public string Color { get; set; }
    }
}

<script>
    window.initializeDrawingBoard = (dotNetReference, color, name) => {
        const canvas = document.getElementById('drawingBoard');
        const ctx = canvas.getContext('2d');

        const rect = canvas.parentElement.getBoundingClientRect();
        const pixelRatio = window.devicePixelRatio || 1;
        canvas.width = rect.width * pixelRatio;
        canvas.height = rect.height * pixelRatio;
        ctx.scale(pixelRatio, pixelRatio);

        let isDrawing = false;
        let startX = 0;
        let startY = 0;

        function startDrawing(event) {
            isDrawing = true;
            const { x, y } = getMousePosition(event);
            startX = x;
            startY = y;
        }

        function stopDrawing() {
            isDrawing = false;
            ctx.beginPath();
        }

        function draw(event) {
            if (!isDrawing) return;
            const { x: currentX, y: currentY } = getMousePosition(event);

            ctx.strokeStyle = color;
            ctx.lineWidth = 3;
            ctx.lineCap = 'round';

            ctx.lineTo(currentX, currentY);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(currentX, currentY);

            dotNetReference.invokeMethodAsync("SendDrawingData",
            Math.round(startX),
            Math.round(startY),
            Math.round(currentX),
            Math.round(currentY))
                .catch(err => console.error('Error sending drawing data:', err));

            startX = currentX;
            startY = currentY;
        }

        function getMousePosition(event) {
            const rect = canvas.getBoundingClientRect();
            return {
                x: (event.clientX - rect.left) * (canvas.width / rect.width),
                y: (event.clientY - rect.top) * (canvas.height / rect.height)
            };
        }

        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mousemove', draw);
    };

    window.drawFromServer = (startX, startY, endX, endY, color, name) => {
        const canvas = document.getElementById('drawingBoard');
        const ctx = canvas.getContext('2d');

        ctx.strokeStyle = color;
        ctx.lineWidth = 3;
        ctx.lineCap = 'round';

        ctx.beginPath();
        ctx.moveTo(startX, startY);
        ctx.lineTo(endX, endY);
        ctx.stroke();
    };
</script>
